{
  "fileName": "posteffect-vignette.js",
  "filePath": "scripts/posteffects/posteffect-vignette.js",
  "url": "https://github.com/playcanvas/engine/scripts/posteffects/posteffect-vignette.js",
  "summary": "# PlayCanvas Engine - Vignette Effect\n\nThe `VignetteEffect` class is a post-processing effect that adds a vignette to the screen. It is a part of the PlayCanvas engine project and is used to enhance the visual quality of the game. \n\n## How it Works\n\nThe `VignetteEffect` class extends the `PostEffect` class and overrides its `render` method. The `render` method takes an input target, an output target, and a rectangle as parameters. It sets the values of the `uColorBuffer`, `uOffset`, and `uDarkness` uniforms in the shader and then draws a quad using the `vignetteShader`. The `vignetteShader` is a fragment shader that applies the vignette effect to the screen.\n\nThe `Vignette` script is a wrapper around the `VignetteEffect` class that makes it easier to use in a PlayCanvas project. It adds two attributes to the script: `offset` and `darkness`. These attributes control the offset and darkness of the vignette effect. The `initialize` method of the script creates a new instance of the `VignetteEffect` class and sets its `offset` and `darkness` properties to the values of the `offset` and `darkness` attributes. It then adds the effect to the camera's post-effects queue. \n\nThe `Vignette` script also listens for changes to the `offset` and `darkness` attributes and updates the `effect` object accordingly. It also listens for changes to the `state` of the script and adds or removes the effect from the camera's post-effects queue accordingly. Finally, it listens for the `destroy` event and removes the effect from the camera's post-effects queue.\n\n## Example Usage\n\nTo use the `Vignette` script in a PlayCanvas project, you can attach it to a camera entity. You can then adjust the `offset` and `darkness` attributes to achieve the desired effect. For example:\n\n```javascript\nvar cameraEntity = app.root.findByName('Camera');\ncameraEntity.addComponent('script');\ncameraEntity.script.create('vignette', {\n    offset: 0.5,\n    darkness: 0.5\n});\n```\n\nThis will add a vignette effect to the camera with an offset of 0.5 and a darkness of 0.5.",
  "questions": "1. What is the purpose of this code?\n- This code implements the VignetteEffect post processing effect in the PlayCanvas engine.\n\n2. What are the properties of the VignetteEffect?\n- The VignetteEffect has two properties: offset, which controls the offset of the effect, and darkness, which controls the darkness of the effect.\n\n3. How is the VignetteEffect applied to an entity's camera?\n- The VignetteEffect is added to an entity's camera postEffects queue in the initialize function of the Vignette script, and can be enabled or disabled using the state attribute."
}