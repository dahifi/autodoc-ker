{
  "fileName": "example-data.mjs",
  "filePath": "examples/scripts/example-data.mjs",
  "url": "https://github.com/playcanvas/engine/examples/scripts/example-data.mjs",
  "summary": "This code is responsible for generating example data for the PlayCanvas engine project. The example data is used to showcase the capabilities of the engine and provide users with examples of how to use it. The code imports several modules, including fs, BabelParser, Prettier, and Babel, which are used to read and manipulate files, format code, and transpile TypeScript to JavaScript. \n\nThe code starts by defining the __filename and __dirname variables using the fileURLToPath and dirname functions from the path and url modules, respectively. It then defines the MAIN_DIR variable as the path to the parent directory of the current file. \n\nNext, the code creates an empty object called exampleData, which will be populated with data about the examples. It checks if the dist directory exists and creates it if it doesn't. \n\nThe code then reads the names of the directories in the src/examples directory using the readDirectoryNames function, which is imported from another file. For each directory, it creates a new object in the exampleData object with the name of the directory as the key. It then reads the names of the files in the directory and processes each file. \n\nFor each file, the code extracts the TypeScript code and converts it to JavaScript using Babel. It then formats the JavaScript code using Prettier and stores it in the exampleData object along with the name and category of the example. If the TypeScript code contains a static object called FILES, the code evaluates it and stores the result in the exampleData object. \n\nFinally, the code writes the exampleData object to a file called example-data.js in the dist directory. The object is exported as a module so that it can be used by other parts of the PlayCanvas engine project. \n\nOverall, this code is an important part of the PlayCanvas engine project as it generates example data that is used to showcase the engine's capabilities and provide users with examples of how to use it. The code uses several modules to read, manipulate, and format files, and it processes each example file to extract relevant information and store it in the exampleData object. The resulting object is then written to a file and exported as a module for use in other parts of the project.",
  "questions": "1. What is the purpose of this code?\n    \n    This code reads example files from a directory, transforms them from TypeScript to JavaScript, formats them with Prettier, and writes the resulting data to a file.\n\n2. What dependencies are required for this code to run?\n    \n    This code requires the `fs`, `@babel/parser`, `prettier/standalone`, `@babel/standalone`, `path`, and `url` modules.\n\n3. What is the output of this code?\n    \n    The output of this code is a JavaScript file containing an object with data about the example files, including their TypeScript and JavaScript code, file names, and categories."
}