{
  "fileName": "material-clear-coat.tsx",
  "filePath": "examples/src/examples/graphics/material-clear-coat.tsx",
  "url": "https://github.com/playcanvas/engine/examples/src/examples/graphics/material-clear-coat.tsx",
  "summary": "The code is an example of how to use the PlayCanvas engine to create a 3D scene with two spheres, each with a different material. The first sphere has a standard material, while the second sphere has a clear coat material. The example demonstrates how to create entities with different components, such as camera and light, and how to add them to the scene. \n\nThe code starts by importing the PlayCanvas engine and defining a class called MaterialClearCoatExample. The class has a static CATEGORY property that defines the category of the example, a static NAME property that defines the name of the example, and a static WEBGPU_ENABLED property that indicates whether the example is enabled for WebGPU. \n\nThe example method takes two parameters: a canvas element and a device type. The method creates a graphics device using the createGraphicsDevice method of the PlayCanvas engine. It then creates an instance of the AppBase class and initializes it with the graphics device and other options. The example loads several assets, including textures and a cubemap, and sets them as properties of the app.scene object. \n\nThe example then creates two entities: a camera entity and a light entity. The camera entity has a camera component, while the light entity has a light component. The example also defines a function called createSphere that creates a sphere entity with a render component and adds it to the scene. The function takes three parameters: the x, y, and z position of the sphere, and the material to use for the sphere. \n\nThe example creates two materials: a standard material and a clear coat material. Both materials have diffuse, metalness, gloss, and normal maps, as well as other properties such as diffuse color, metalness value, and bumpiness. The clear coat material also has clear coat and clear coat gloss properties. The example calls the createSphere function twice, once for each material, to create two spheres with different materials. \n\nFinally, the example sets up an update event listener that rotates the camera around the spheres. The example starts the app and loads the assets when the assetListLoader finishes loading. \n\nThis code can be used as a starting point for creating 3D scenes with the PlayCanvas engine. Developers can modify the code to add more entities, components, and materials to the scene, and to create more complex interactions between them. For example, developers can add physics components to the entities to create a physics simulation, or add scripting components to the entities to create custom behaviors. \n\nExample usage:\n\n```\nimport MaterialClearCoatExample from './MaterialClearCoatExample';\n\nconst canvas = document.getElementById('canvas');\nconst deviceType = 'webgl2';\n\nconst example = new MaterialClearCoatExample();\nexample.example(canvas, deviceType);\n```",
  "questions": "1. What is the purpose of this code?\n- This code is an example of how to use the Material Clear Coat feature in the PlayCanvas engine to create a 3D scene with two spheres, each with a different material.\n\n2. What dependencies does this code have?\n- This code imports the entire PlayCanvas library using the wildcard syntax, as well as the HTMLCanvasElement interface from the global namespace. It also relies on several assets (textures) that are loaded asynchronously.\n\n3. What is the significance of the `WEBGPU_ENABLED` property?\n- The `WEBGPU_ENABLED` property is a boolean flag that indicates whether the example is compatible with the WebGPU API. If set to `true`, the example will use WebGPU instead of WebGL to render the scene."
}