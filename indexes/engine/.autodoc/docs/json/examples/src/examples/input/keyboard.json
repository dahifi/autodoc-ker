{
  "fileName": "keyboard.tsx",
  "filePath": "examples/src/examples/input/keyboard.tsx",
  "url": "https://github.com/playcanvas/engine/examples/src/examples/input/keyboard.tsx",
  "summary": "The code defines a class called `KeyboardExample` that demonstrates how to use the PlayCanvas engine to create a 3D scene with a model that can be rotated using keyboard input. \n\nThe `example` method of the `KeyboardExample` class takes two arguments: a canvas element and a string representing the type of graphics device to use. It creates a dictionary of assets that will be used in the scene, including a texture and a 3D model. It then creates a graphics device using the `pc.createGraphicsDevice` method, passing in the canvas element and an object with options for the graphics device. \n\nNext, it creates an instance of the `pc.AppBase` class, passing in the canvas element and an object with options for the app. It sets the canvas fill mode to `pc.FILLMODE_FILL_WINDOW` and the canvas resolution to `pc.RESOLUTION_AUTO`. It then loads the assets using an instance of the `pc.AssetListLoader` class and starts the app.\n\nOnce the app is started, it sets the skybox of the scene to the texture asset, sets the tone mapping to `pc.TONEMAP_ACES`, sets the exposure to 1.6, and sets the skybox mip level to 1. It then creates an entity with a camera component and adds it to the root of the scene. It also creates an instance of the 3D model asset, adds it to the root of the scene, and sets up keyboard input using an instance of the `pc.Keyboard` class. \n\nThe `pc.Keyboard` class takes a DOM element as an argument and provides methods for checking whether a key is currently pressed. The `app.on(\"update\")` method is used to listen for updates to the app and check whether the left or right arrow key is pressed. If the left arrow key is pressed, the model entity is rotated to the left, and if the right arrow key is pressed, the model entity is rotated to the right.\n\nOverall, this code demonstrates how to use the PlayCanvas engine to create a 3D scene with keyboard input. It shows how to load assets, create a graphics device and an app, set up a camera, add entities to the scene, and handle keyboard input. This code could be used as a starting point for creating more complex 3D scenes with user input.",
  "questions": "1. What is the purpose of the `KeyboardExample` class?\n- The `KeyboardExample` class is an example of how to use keyboard input in the PlayCanvas engine.\n\n2. What assets are being loaded in the `example` method?\n- The `example` method loads a texture asset and a container asset, which are used to set the skybox and instantiate a render entity, respectively.\n\n3. What is the purpose of the `gfxOptions` object?\n- The `gfxOptions` object is used to specify the graphics device type and the URLs for the glslang and twgsl libraries."
}