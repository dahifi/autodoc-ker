{
  "fileName": "clustered-area-lights.tsx",
  "filePath": "examples/src/examples/graphics/clustered-area-lights.tsx",
  "url": "https://github.com/playcanvas/engine/examples/src/examples/graphics/clustered-area-lights.tsx",
  "summary": "The code defines a class called `AreaLightsExample` that provides an example of clustered area lights in the PlayCanvas engine. The class has two static properties, `CATEGORY` and `NAME`, which are used to categorize and name the example respectively. The `WEBGPU_ENABLED` property is a boolean that indicates whether the example is enabled for WebGPU.\n\nThe `controls` method returns a React component that renders a panel with two sliders for adjusting the gloss and metalness properties of a material. The `example` method takes a canvas element, a device type, and some data as arguments. It creates a graphics device using the `createGraphicsDevice` method of the PlayCanvas engine, and initializes an app with the device. It then loads some assets, including textures and scripts, and creates a scene with a ground plane, a camera, and a grid of area lights of different shapes and colors.\n\nThe `createPrimitive` function is a helper function that creates a primitive shape with a given type, position, scale, and material. The `createAreaLight` function is another helper function that creates an area light with a given type, shape, position, scale, color, intensity, and range. It also creates a visual representation of the light source using a primitive shape and a material.\n\nThe `example` method sets up some general scene rendering properties, such as tone mapping and clustered lighting. It also sets some parameters for the clustered lighting, such as the number of cells and the maximum number of lights per cell. It enables area lights and disables shadows. It creates some materials, including a black material for the back side of light objects and a ground material with gloss and metalness properties. It creates a camera with an orbit camera script and adds bloom postprocessing to it. It generates a grid of area lights of different shapes and colors. Finally, it handles changes to the gloss and metalness properties of the ground material by updating the material properties.\n\nOverall, this code provides an example of how to create and manipulate area lights in the PlayCanvas engine. It demonstrates how to use the engine's graphics device, assets, and scene to create a 3D scene with area lights and postprocessing effects. It also shows how to handle user input and update material properties in response to changes.",
  "questions": "1. What is the purpose of the `controls` method in the `AreaLightsExample` class?\n- The `controls` method returns a React component that contains UI controls for adjusting the gloss and metalness properties of a material.\n\n2. What is the purpose of the `example` method in the `AreaLightsExample` class?\n- The `example` method sets up a PlayCanvas app that demonstrates clustered area lights with different shapes and properties, and allows for adjusting the material properties through the UI controls returned by the `controls` method.\n\n3. What is the significance of the `WEBGPU_ENABLED` static property in the `AreaLightsExample` class?\n- The `WEBGPU_ENABLED` static property indicates that the example supports the WebGPU API for hardware-accelerated graphics rendering, which is a new standard that is currently being developed and implemented in browsers."
}