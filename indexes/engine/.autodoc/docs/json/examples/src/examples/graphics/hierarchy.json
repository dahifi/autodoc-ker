{
  "fileName": "hierarchy.tsx",
  "filePath": "examples/src/examples/graphics/hierarchy.tsx",
  "url": "https://github.com/playcanvas/engine/examples/src/examples/graphics/hierarchy.tsx",
  "summary": "The `HierarchyExample` class is a code example that demonstrates how to create a hierarchy of entities in the PlayCanvas engine. The purpose of this code is to show how to use the PlayCanvas engine to create a complex scene with multiple entities that are organized in a hierarchical structure. The code creates a root entity and then recursively creates child entities with different shapes, positions, and scales. The child entities are added to the parent entity, forming a tree-like structure. The code also creates a camera and a light entity to provide illumination and a viewpoint for the scene.\n\nThe `example` method is the main entry point for the code. It takes two parameters: a canvas element and a device type. The canvas element is used to create a graphics device, which is required to render the scene. The device type specifies the type of graphics device to create, such as \"webgl\" or \"webgpu\". The method creates a graphics device using the `pc.createGraphicsDevice` function and initializes a new PlayCanvas application using the `pc.AppBase` class. It then sets the canvas fill mode and resolution and starts the application.\n\nThe `createPrimitive` function is a helper function that creates a new entity with a render component and a material of random color. The `createChildren` function is a recursive function that creates a new layer of child entities for a specified parent entity. It takes several parameters, including the parent entity, the size of the grid, the scale of the entities, the spacing between the entities, and the number of levels to create. The function creates child entities with random shapes, positions, and scales and adds them to the parent entity. It then calls itself recursively to create the next layer of child entities.\n\nThe code also creates a camera entity and a light entity using the `camera` and `light` components, respectively. The camera is positioned at an angle to provide a viewpoint for the scene, and the light provides illumination for the entities.\n\nFinally, the code updates the rotation of each entity each frame using the `update` event. It creates a new quaternion with a rotation that changes with time and applies it to each entity's local rotation.\n\nOverall, this code demonstrates how to use the PlayCanvas engine to create a complex scene with multiple entities organized in a hierarchical structure. It shows how to create child entities recursively and how to update their properties each frame. This code can be used as a starting point for creating more complex scenes in the PlayCanvas engine.",
  "questions": "1. What is the purpose of the `HierarchyExample` class?\n- The `HierarchyExample` class is an example of how to create a hierarchy of entities in the PlayCanvas engine.\n\n2. What graphics device options are being set in the `example` method?\n- The `example` method sets the device type, glslang URL, and twgsl URL for the graphics device.\n\n3. What is the purpose of the `createChildren` function?\n- The `createChildren` function is a recursive helper function that creates a hierarchy of child entities for a specified parent entity, based on a specified grid size, scale, spacing, and number of levels."
}