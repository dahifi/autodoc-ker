{
  "fileName": "text-emojis.tsx",
  "filePath": "examples/src/examples/user-interface/text-emojis.tsx",
  "url": "https://github.com/playcanvas/engine/examples/src/examples/user-interface/text-emojis.tsx",
  "summary": "The `TextEmojisExample` class is a code example that demonstrates how to use PlayCanvas engine to render text with emojis using the `CanvasFont` class. The purpose of this code is to show how to create a 2D screen, add text entities to it, and use a canvas font asset to render text with emojis.\n\nThe `example` method takes two parameters: a canvas element and a device type. It creates a graphics device using the `createGraphicsDevice` method, initializes an app using the `AppBase` class, and sets the canvas to fill the window and automatically change resolution to be the same as the canvas size. It then creates a camera and a 2D screen, adds them to the app's root entity, and creates text entities using the `createText` method. The `createText` method takes a y-coordinate and a string of text as parameters, creates a new entity, adds an `element` component to it, sets its font to the `CanvasFont` asset, and adds it to the screen entity.\n\nThe `CanvasFont` asset is created using the `new pc.CanvasFont` constructor, which takes an app instance and an options object as parameters. The options object specifies the font name, font size, and texture size. The `createTextures` method is called to create the texture atlas for the first string of text, and the `updateTextures` method is called to update the texture atlas for the other two strings of text.\n\nThe code also creates a layout group entity and adds it to the screen entity. The layout group entity has a `layoutgroup` component that specifies its orientation, width and height fitting, and wrapping. It creates a child entity for each texture in the `CanvasFont` asset and adds an `element` component and a `layoutchild` component to each child entity. The `element` component specifies the texture and type of the child entity, and the `layoutchild` component specifies whether the child entity should be excluded from the layout.\n\nOverall, this code example demonstrates how to use PlayCanvas engine to render text with emojis using the `CanvasFont` class and how to create a 2D screen and a layout group entity. It can be used as a reference for developers who want to add text with emojis to their PlayCanvas projects.",
  "questions": "1. What is the purpose of this code?\n- This code is an example of how to use PlayCanvas engine to create a canvas font asset that supports emojis and render it on a 2D screen.\n\n2. What external dependencies does this code have?\n- This code imports the entire PlayCanvas engine library from a relative path and uses two external URLs for glslang and twgsl.\n\n3. What is the expected output of this code?\n- The expected output of this code is a 2D screen with three lines of text, each containing different emojis rendered using a canvas font asset. Additionally, there is a debug text and a layout group entity with child elements that display the texture atlases of the canvas font asset."
}