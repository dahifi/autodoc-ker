{
  "fileName": "hierarchy.js",
  "filePath": "src/framework/handlers/hierarchy.js",
  "url": "https://github.com/playcanvas/engine/src/framework/handlers/hierarchy.js",
  "summary": "The code defines a class called `HierarchyHandler` that is responsible for handling resources of type \"hierarchy\". The class has two methods: `load` and `open`. \n\nThe `load` method takes a URL and a callback function as parameters. It uses the `SceneUtils.load` method to load the scene data from the specified URL and passes the loaded data to the callback function. The `maxRetries` property is used to specify the maximum number of times the `load` method should retry loading the scene data if it fails. \n\nThe `open` method takes a URL and scene data as parameters. It sets a flag to prevent script initialization until the entire scene is open. It then creates a new `SceneParser` object and uses it to parse the scene data. The parsed scene data is returned as a parent object. Finally, the flag is reset to enable script initialization. \n\nThe `HierarchyHandler` class is likely used in the larger PlayCanvas engine project to handle loading and parsing of scene data. It provides a standardized way of handling scene data and allows other parts of the engine to easily load and manipulate scene data. \n\nExample usage:\n\n```\nconst app = new pc.Application();\nconst handler = new HierarchyHandler(app);\n\n// load scene data from URL\nhandler.load('https://example.com/scene.json', function(data) {\n  // open scene data\n  const parent = handler.open('https://example.com/scene.json', data);\n  // manipulate scene data\n  // ...\n});\n```",
  "questions": "1. What is the purpose of the `SceneParser` and `SceneUtils` imports?\n- The `SceneParser` is used to parse scene data, while `SceneUtils` is used to load scene data with retries.\n\n2. What is the significance of the `handlerType` property?\n- The `handlerType` property specifies the type of resource that the `HierarchyHandler` handles.\n\n3. What does the `open` method do?\n- The `open` method initializes the `SceneParser` to parse the scene data, disables script initialization until the entire scene is open, and then returns the parent entity of the scene."
}