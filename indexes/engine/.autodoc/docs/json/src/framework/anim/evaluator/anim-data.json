{
  "fileName": "anim-data.js",
  "filePath": "src/framework/anim/evaluator/anim-data.js",
  "url": "https://github.com/playcanvas/engine/src/framework/anim/evaluator/anim-data.js",
  "summary": "The code defines a class called `AnimData` that represents a set of data used in animation. The purpose of this class is to provide a convenient way to store and manipulate animation data in the PlayCanvas engine. \n\nThe constructor of the `AnimData` class takes two parameters: `components` and `data`. The `components` parameter specifies how many components make up an element of data. For example, if `components` is set to 3, then the data represents a set of 3-dimensional vectors. The `data` parameter is an array of numbers that represents the actual animation data. The length of the `data` array must be a multiple of `components`.\n\nThe `AnimData` class has two getter methods: `components` and `data`. The `components` getter returns the number of components that make up an element of data. The `data` getter returns the actual animation data as either a `Float32Array` or a regular array of numbers.\n\nThis class can be used in the PlayCanvas engine to store and manipulate animation data. For example, it can be used to store keyframe data for skeletal animations or to store vertex data for morph target animations. Here is an example of how the `AnimData` class can be used to store keyframe data for a skeletal animation:\n\n```\nconst keyframeData = new AnimData(7, [\n    0, 0, 0, 0, 0, 0, 0, // position and rotation of bone 1 at time 0\n    1, 1, 1, 0, 0, 0, 0, // position and rotation of bone 1 at time 1\n    2, 2, 2, 0, 0, 0, 0, // position and rotation of bone 1 at time 2\n    0, 0, 0, 0, 0, 0, 0, // position and rotation of bone 2 at time 0\n    1, 1, 1, 0, 0, 0, 0, // position and rotation of bone 2 at time 1\n    2, 2, 2, 0, 0, 0, 0, // position and rotation of bone 2 at time 2\n]);\n\n// Get the position of bone 1 at time 1\nconst bone1Pos = keyframeData.data.subarray(7, 10);\n``` \n\nIn this example, the `keyframeData` object represents the position and rotation of two bones at three different times. The `components` parameter is set to 7 because each element of data consists of a 3-dimensional position vector and a 4-dimensional rotation quaternion. The `data` parameter is an array of numbers that represents the actual keyframe data. The `subarray` method is used to extract the position of bone 1 at time 1.",
  "questions": "1. What is the purpose of the `AnimData` class?\n- The `AnimData` class is used to wrap a set of data used in animation.\n\n2. What parameters are required to create a new instance of `AnimData`?\n- Two parameters are required to create a new instance of `AnimData`: `components`, which specifies how many components make up an element of data, and `data`, which is the set of data.\n\n3. What types of data can be returned by the `data` getter?\n- The `data` getter can return either a `Float32Array` or an array of numbers (`number[]`)."
}