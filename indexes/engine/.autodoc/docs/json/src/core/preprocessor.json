{
  "fileName": "preprocessor.js",
  "filePath": "src/core/preprocessor.js",
  "url": "https://github.com/playcanvas/engine/src/core/preprocessor.js",
  "summary": "# Preprocessor.js\n\nThe `Preprocessor.js` file is a static class that implements a subset of C-style preprocessor. It is used to preprocess the source code and resolve the code based on the defines and ifdefs. The class is inspired by the `Preprocessor.js` library.\n\nThe class contains several regular expressions that are used to match different keywords and expressions. The accepted keywords are `#ifdef`, `#ifndef`, `#if`, `#endif`, `#else`, `#elif`, `#define`, `#undef`, and `#extension`. The class also contains a list of unsupported characters in the expression, which includes `|`, `&`, `<`, `>`, `=`, `+`, and `-`.\n\nThe `run` method is the main method of the class. It takes a string of source code as input and returns the preprocessed source code. The method first strips comments from the source code and then preprocesses the defines and ifdefs. If the preprocessing is successful, the method removes empty lines and consecutive empty lines from the source code.\n\nThe `_preprocess` method is a private method that preprocesses the defines and ifdefs. The method uses a stack to store information about ifdef blocks. The method also uses a map to store active defines, which maps define name to its value. The method then matches the keywords and expressions using regular expressions and evaluates the expressions using the `evaluate` method. The method then adds the information to the stack and handles the ifdef blocks.\n\nThe `_keep` method is a private method that returns true if the evaluation is inside keep branches. The `evaluate` method is a simple expression evaluation method that handles cases like `expression`, `defined(expression)`, and `!defined(expression)`. The method does not handle more complex cases that would require a more complex system.\n\nThe `Preprocessor` class is a useful tool for preprocessing source code and resolving the code based on the defines and ifdefs. It is a powerful tool that can be used in a variety of projects.",
  "questions": "1. What is the purpose of this code?\n- This code is a pure static class that implements a subset of C-style preprocessor. It preprocesses the source code and resolves the code based on the defines and ifdefs.\n\n2. What are the accepted keywords in this code?\n- The accepted keywords in this code are #ifdef, #ifndef, #if, #endif, #else, #elif, #define, #undef, and #extension.\n\n3. What does the evaluate() function do?\n- The evaluate() function performs a very simple expression evaluation. It handles cases like expression, defined(expression), and !defined(expression). It tests if the expression define exists and handles inversion."
}