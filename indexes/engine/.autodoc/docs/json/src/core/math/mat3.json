{
  "fileName": "mat3.js",
  "filePath": "src/core/math/mat3.js",
  "url": "https://github.com/playcanvas/engine/src/core/math/mat3.js",
  "summary": "# Mat3.js\n\nThe `Mat3.js` file contains the implementation of a 3x3 matrix class called `Mat3`. This class is used to represent 3x3 matrices and provides various methods to manipulate and transform them. \n\n## Class Definition\n\nThe `Mat3` class is defined using the `class` keyword in JavaScript. It has the following properties and methods:\n\n### Properties\n\n- `data`: A `Float32Array` that stores the matrix elements in the form of a flat array.\n\n### Methods\n\n- `constructor()`: A constructor method that creates a new `Mat3` instance and initializes it to the identity matrix.\n- `clone()`: A method that creates a duplicate of the specified matrix.\n- `copy(rhs)`: A method that copies the contents of a source 3x3 matrix to a destination 3x3 matrix.\n- `set(src)`: A method that copies the contents of a source array[9] to a destination 3x3 matrix.\n- `equals(rhs)`: A method that reports whether two matrices are equal.\n- `isIdentity()`: A method that reports whether the specified matrix is the identity matrix.\n- `setIdentity()`: A method that sets the matrix to the identity matrix.\n- `toString()`: A method that converts the matrix to string form.\n- `transpose()`: A method that generates the transpose of the specified 3x3 matrix.\n- `setFromMat4(m)`: A method that converts the specified 4x4 matrix to a Mat3.\n- `transformVector(vec, res)`: A method that transforms a 3-dimensional vector by a 3x3 matrix.\n\n## Usage\n\nThe `Mat3` class can be used to represent 3x3 matrices and perform various operations on them. Here are some examples of how to use this class:\n\n### Creating a new Mat3 instance\n\n```javascript\nconst mat = new Mat3();\n```\n\nThis creates a new `Mat3` instance and initializes it to the identity matrix.\n\n### Cloning a matrix\n\n```javascript\nconst mat1 = new Mat3();\nconst mat2 = mat1.clone();\n```\n\nThis creates a new `Mat3` instance `mat1` and clones it to create another instance `mat2`.\n\n### Copying a matrix\n\n```javascript\nconst mat1 = new Mat3();\nconst mat2 = new Mat3();\nmat2.copy(mat1);\n```\n\nThis creates two new `Mat3` instances `mat1` and `mat2`, and copies the contents of `mat1` to `mat2`.\n\n### Setting a matrix from an array\n\n```javascript\nconst mat = new Mat3();\nmat.set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```\n\nThis creates a new `Mat3` instance `mat` and sets its elements to the values in the array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`.\n\n### Checking if two matrices are equal\n\n```javascript\nconst mat1 = new Mat3();\nconst mat2 = new Mat3();\nconst isEqual = mat1.equals(mat2);\n```\n\nThis creates two new `Mat3` instances `mat1` and `mat2`, and checks if they are equal.\n\n### Checking if a matrix is the identity matrix\n\n```javascript\nconst mat = new Mat3();\nconst isIdentity = mat.isIdentity();\n```\n\nThis creates a new `Mat3` instance `mat` and checks if it is the identity matrix.\n\n### Setting a matrix to the identity matrix\n\n```javascript\nconst mat = new Mat3();\nmat.setIdentity();\n```\n\nThis creates a new `Mat3` instance `mat` and sets it to the identity matrix.\n\n### Converting a matrix to string form\n\n```javascript\nconst mat = new Mat3();\nconst str = mat.toString();\n```\n\nThis creates a new `Mat3` instance `mat` and converts it to string form.\n\n### Generating the transpose of a matrix\n\n```javascript\nconst mat = new Mat3();\nmat.transpose();\n```\n\nThis creates a new `Mat3` instance `mat` and generates its transpose.\n\n### Converting a 4x4 matrix to a Mat3\n\n```javascript\nconst mat4 = new Mat4();\nconst mat3 = new Mat3();\nmat3.setFromMat4(mat4);\n```\n\nThis creates a new `Mat4` instance `mat4` and a new `Mat3` instance `mat3`, and converts `mat4` to `mat3`.\n\n### Transforming a vector by a matrix\n\n```javascript\nconst mat = new Mat3();\nconst vec = new Vec3(1, 2, 3);\nconst res = new Vec3();\nmat.transformVector(vec, res);\n```\n\nThis creates a new `Mat3` instance `mat`, a new `Vec3` instance `vec`, and a new `Vec3` instance `res`, and transforms `vec` by `mat`. The result is stored in `res`.",
  "questions": "1. What is the purpose of the `Vec3` import statement at the beginning of the code?\n- The `Vec3` import statement is used to import the `Vec3` class from the `vec3.js` file.\n\n2. What is the purpose of the `Mat3` class?\n- The `Mat3` class represents a 3x3 matrix and provides methods for matrix operations such as cloning, copying, setting, transforming vectors, and more.\n\n3. What are the `IDENTITY` and `ZERO` properties of the `Mat3` class?\n- The `IDENTITY` property is a constant matrix set to the identity, while the `ZERO` property is a constant matrix with all elements set to 0. Both properties are instances of the `Mat3` class and are frozen to prevent modification."
}