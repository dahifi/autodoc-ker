{
  "fileName": "ray.js",
  "filePath": "src/core/shape/ray.js",
  "url": "https://github.com/playcanvas/engine/src/core/shape/ray.js",
  "summary": "## PlayCanvas Engine - Ray Class\n\nThe `Ray` class is a part of the PlayCanvas engine project and is used to represent an infinite ray in 3D space. It is defined in a file located in the `math` directory of the project and is imported using ES6 module syntax.\n\nThe `Ray` class has two properties - `origin` and `direction`. `origin` is a `Vec3` object that represents the starting point of the ray, while `direction` is a `Vec3` object that represents the direction of the ray. Both properties are read-only and can be accessed using dot notation.\n\nThe `Ray` class has three methods - `constructor()`, `set()`, `copy()`, and `clone()`. \n\nThe `constructor()` method is used to create a new instance of the `Ray` class. It takes two optional parameters - `origin` and `direction`. If `origin` is provided, it is copied to the `origin` property of the new instance. If `direction` is provided, it is copied to the `direction` property of the new instance. If neither parameter is provided, the `origin` property is set to the origin (0, 0, 0) and the `direction` property is set to a direction down the world negative Z axis (0, 0, -1).\n\n```javascript\n// Create a new ray starting at the position of this entity and pointing down\n// the entity's negative Z axis\nvar ray = new pc.Ray(this.entity.getPosition(), this.entity.forward);\n```\n\nThe `set()` method is used to set the `origin` and `direction` properties of the `Ray` instance to the supplied vector values. It takes two parameters - `origin` and `direction`, both of which are `Vec3` objects. The method copies the values of these vectors to the `origin` and `direction` properties of the `Ray` instance and returns the instance for chaining.\n\n```javascript\nvar ray = new pc.Ray();\nray.set(new pc.Vec3(1, 2, 3), new pc.Vec3(0, 1, 0));\n```\n\nThe `copy()` method is used to copy the contents of a source `Ray` instance to the current instance. It takes one parameter - `src`, which is the source `Ray` instance. The method copies the `origin` and `direction` properties of the `src` instance to the `origin` and `direction` properties of the current instance and returns the instance for chaining.\n\n```javascript\nvar ray1 = new pc.Ray(new pc.Vec3(1, 2, 3), new pc.Vec3(0, 1, 0));\nvar ray2 = new pc.Ray();\nray2.copy(ray1);\n```\n\nThe `clone()` method is used to create a duplicate of the current `Ray` instance. It returns a new `Ray` instance with the same `origin` and `direction` properties as the current instance.\n\n```javascript\nvar ray1 = new pc.Ray(new pc.Vec3(1, 2, 3), new pc.Vec3(0, 1, 0));\nvar ray2 = ray1.clone();\n```",
  "questions": "1. What is the purpose of the `Vec3` import and how is it used in this code?\n   - The `Vec3` import is used to define the starting point and direction of the ray as instances of `Vec3`. It is also used in the `set`, `copy`, and `clone` methods to manipulate the origin and direction of the ray.\n2. What is the default direction of the ray and how can it be changed?\n   - The default direction of the ray is down the world negative Z axis (0, 0, -1). It can be changed by passing a different `Vec3` instance as the `direction` parameter when creating a new `Ray` instance or by calling the `set` method with a different `Vec3` instance for the `direction` parameter.\n3. What is the purpose of the `clone` method and how is it used?\n   - The `clone` method returns a duplicate `Ray` instance with the same origin and direction as the original `Ray`. It is used to create a copy of the `Ray` that can be modified without affecting the original `Ray`."
}