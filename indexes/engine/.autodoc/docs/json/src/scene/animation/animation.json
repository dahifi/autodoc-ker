{
  "fileName": "animation.js",
  "filePath": "src/scene/animation/animation.js",
  "url": "https://github.com/playcanvas/engine/src/scene/animation/animation.js",
  "summary": "The code defines three classes: `Key`, `Node`, and `Animation`. These classes are used to create and manage animations in the PlayCanvas engine.\n\nThe `Key` class represents a single keyframe in an animation. It has four properties: `time`, `position`, `rotation`, and `scale`. `time` is a number representing the time in seconds at which the keyframe occurs. `position`, `rotation`, and `scale` are vectors representing the position, rotation, and scale of the animated object at the given time.\n\nThe `Node` class represents a single node in an animation hierarchy. It has two properties: `_name` and `_keys`. `_name` is a string representing the name of the node. `_keys` is an array of `Key` objects representing the keyframes for the node.\n\nThe `Animation` class represents an animation sequence. It has four properties: `name`, `duration`, `_nodes`, and `_nodeDict`. `name` is a string representing the name of the animation. `duration` is a number representing the duration of the animation in seconds. `_nodes` is an array of `Node` objects representing the nodes in the animation hierarchy. `_nodeDict` is an object that maps node names to `Node` objects.\n\nThe `Animation` class also has three methods: `getNode`, `addNode`, and `get nodes`. `getNode` takes a node name as an argument and returns the `Node` object with that name. `addNode` takes a `Node` object as an argument and adds it to the `_nodes` array and `_nodeDict` object. `get nodes` is a getter method that returns the `_nodes` array.\n\nOverall, these classes provide a way to create and manage animations in the PlayCanvas engine. For example, a developer could create an `Animation` object, add `Node` objects to it, and then use the `Key` class to define the keyframes for each node. The `Animation` object could then be used to animate objects in a scene. Here is an example of how these classes might be used:\n\n```\n// Create a new animation\nconst animation = new Animation();\nanimation.name = 'MyAnimation';\nanimation.duration = 5;\n\n// Create a new node\nconst node = new Node();\nnode._name = 'MyNode';\n\n// Add keyframes to the node\nnode._keys.push(new Key(0, new pc.Vec3(0, 0, 0), new pc.Quat(), new pc.Vec3(1, 1, 1)));\nnode._keys.push(new Key(5, new pc.Vec3(0, 0, 10), new pc.Quat(), new pc.Vec3(1, 1, 1)));\n\n// Add the node to the animation\nanimation.addNode(node);\n\n// Use the animation to animate an object\nconst entity = new pc.Entity();\nentity.addComponent('model', { type: 'box' });\nentity.addComponent('animation', { assets: [], speed: 1 });\nentity.animation.play('MyAnimation');\n```",
  "questions": "1. What is the purpose of the `Key` class?\n    \n    The `Key` class represents a keyframe in an animation and stores information about its time, position, rotation, and scale.\n\n2. What is the relationship between the `Node` and `Animation` classes?\n    \n    The `Node` class represents a node in a skeletal hierarchy and contains an array of keyframes. The `Animation` class is a sequence of keyframe arrays which map to the nodes of a skeletal hierarchy and controls how the nodes of the hierarchy are transformed over time.\n\n3. What is the purpose of the `_nodeDict` property in the `Animation` class?\n    \n    The `_nodeDict` property is a dictionary that maps node names to their corresponding `Node` instances. It is used by the `getNode` method to retrieve a `Node` instance by name."
}