{
  "fileName": "skin-instance.js",
  "filePath": "src/scene/skin-instance.js",
  "url": "https://github.com/playcanvas/engine/src/scene/skin-instance.js",
  "summary": "The code defines a class called `SkinInstance` that is responsible for generating a matrix palette used to skin vertices from object space to world space. The class has a constructor that takes a `Skin` object as an argument, which provides the inverse bind pose matrices to generate the final matrix palette. The class has a property called `bones`, which is an array of nodes representing each bone in the skin instance. \n\nThe `init` method initializes the `matrixPalette` property of the class. If the device supports bone textures, it creates a texture with a size that can fit all the bones, and the `matrixPalette` is set to the locked texture. Otherwise, the `matrixPalette` is set to a new `Float32Array`. The `destroy` method destroys the bone texture if it exists.\n\nThe `resolve` method resolves bone IDs to actual graph nodes of the hierarchy. It takes a `rootBone` and an `entity` as arguments. The `rootBone` is set as the root of the hierarchy, and the `bones` property is populated with the nodes representing each bone in the skin instance.\n\nThe `updateMatrices` method updates the matrices of the bones in the skin instance. It takes a `rootNode` and a `skinUpdateIndex` as arguments. If the `_updateBeforeCull` property is true, it calls the `_updateMatrices` method to update the matrices.\n\nThe `_updateMatrices` method updates the matrices of the bones in the skin instance. It takes a `rootNode` and a `skinUpdateIndex` as arguments. It copies the inverse of the `rootNode`'s world transform to `_invMatrix`. It then iterates over the bones in reverse order and multiplies the inverse of the `rootNode`'s world transform with the bone's world transform to get the matrix in `rootNode` space. It then multiplies the matrix with the inverse bind pose matrix to get the matrix in bind space.\n\nThe `updateMatrixPalette` method updates the matrix palette of the skin instance. It takes a `rootNode` and a `skinUpdateIndex` as arguments. It calls the `_updateMatrices` method to update the matrices. It then copies the matrices to the `matrixPalette` property in a format that can be sent to the vertex shader. Finally, it calls the `uploadBones` method to upload the bone texture to the device.\n\nOverall, the `SkinInstance` class is an important part of the PlayCanvas engine that is used to generate a matrix palette for skinning vertices. It provides methods to initialize the matrix palette, resolve bone IDs to actual graph nodes of the hierarchy, update the matrices of the bones in the skin instance, and update the matrix palette.",
  "questions": "1. What is the purpose of the `SkinInstance` class?\n- The `SkinInstance` class is responsible for generating the matrix palette used to skin vertices from object space to world space.\n\n2. What is the `boneTexture` property used for?\n- The `boneTexture` property is used to store the matrix palette as a texture if the device supports bone textures.\n\n3. What is the purpose of the `updateBeforeCull` property?\n- The `updateBeforeCull` property is used to determine whether the matrices need to be updated before frustum culling."
}