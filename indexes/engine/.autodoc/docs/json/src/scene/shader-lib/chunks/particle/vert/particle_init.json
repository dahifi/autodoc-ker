{
  "fileName": "particle_init.js",
  "filePath": "src/scene/shader-lib/chunks/particle/vert/particle_init.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/particle/vert/particle_init.js",
  "summary": "This code is a GLSL shader that is used in the PlayCanvas engine for particle effects. It defines a set of attributes and uniforms that are used to calculate the position, velocity, angle, and lifespan of individual particles in a particle system.\n\nThe `particle_vertexData` attribute is a vec4 that contains the position of the particle in XYZ coordinates and a unique ID plus a random factor in the W component. The `particle_uv` attribute is only used if the particle system is using a mesh to render the particles, and it contains the UV coordinates of the mesh.\n\nThe `matrix_viewProjection`, `matrix_model`, `matrix_normal`, and `matrix_viewInverse` uniforms are matrices that are used to transform the particle positions and orientations into world space. The `matrix_view` uniform is only used if the particle system is using a custom camera matrix.\n\nThe `numParticles`, `numParticlesPot`, `graphSampleSize`, `graphNumSamples`, `stretch`, `wrapBounds`, `emitterScale`, `emitterPos`, `faceTangent`, and `faceBinorm` uniforms are all used to control the behavior of the particle system. They determine the number of particles, the size and shape of the emitter, the direction and orientation of the particles, and other properties.\n\nThe `rate`, `rateDiv`, `lifetime`, `deltaRandomnessStatic`, `scaleDivMult`, `alphaDivMult`, `seed`, and `delta` uniforms are used to control the appearance of the particles. They determine the rate at which particles are emitted, the lifespan of the particles, and how their size and opacity change over time.\n\nThe `particleTexOUT`, `particleTexIN`, `internalTex0`, `internalTex1`, and `internalTex2` uniforms are textures that are used to render the particles. They contain information about the color, opacity, and other properties of the particles.\n\nThe `texCoordsAlphaLife` varying is used to pass information about the particle's texture coordinates, opacity, and lifespan to the fragment shader, which is responsible for actually rendering the particles.\n\nOverall, this shader is a critical component of the PlayCanvas engine's particle system. It defines the behavior and appearance of individual particles, and it is used in conjunction with other shaders and rendering techniques to create complex and dynamic particle effects.",
  "questions": "1. What is the purpose of this code and how is it used within the PlayCanvas engine?\n   - This code defines a GLSL shader for rendering particles in the PlayCanvas engine. It is used to calculate the position, velocity, angle, and lifetime of each particle, as well as to sample textures and apply transformations.\n2. What are some of the key variables and parameters being used in this code?\n   - Some of the key variables and parameters include: particle_vertexData (position and ID of each particle), matrix_viewProjection (combined view and projection matrix), numParticles (total number of particles), lifetime (duration of each particle), particleTexOUT and particleTexIN (textures used for rendering), and wrapBounds (bounds for wrapping particles around the scene).\n3. Are there any dependencies or requirements for using this code in a PlayCanvas project?\n   - Yes, this code assumes the use of certain uniforms and attributes that are defined elsewhere in the PlayCanvas engine. It also requires the use of GLSL shaders and a basic understanding of particle rendering techniques."
}