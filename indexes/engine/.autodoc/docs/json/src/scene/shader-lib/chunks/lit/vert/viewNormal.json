{
  "fileName": "viewNormal.js",
  "filePath": "src/scene/shader-lib/chunks/lit/vert/viewNormal.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/lit/vert/viewNormal.js",
  "summary": "This code is a shader code written in GLSL (OpenGL Shading Language) and it defines a uniform variable `matrix_view` of type `mat4` which represents the view matrix. The view matrix is used to transform the world coordinates into view coordinates, which is the coordinate system relative to the camera. \n\nThe `getViewNormal()` function returns the normal vector of the current vertex in view space. It does this by multiplying the world normal vector `vNormalW` with the upper-left 3x3 submatrix of the view matrix `matrix_view`. This is because the normal vector needs to be transformed by the inverse transpose of the model-view matrix to maintain its perpendicularity to the surface after transformation. \n\nThis code is a part of the PlayCanvas engine project and is used to render 3D graphics. The view matrix is an essential component of the rendering pipeline as it determines the position and orientation of the camera in the scene. The `getViewNormal()` function is used to calculate the normal vector of the vertex in view space, which is used in lighting calculations to determine the amount of light reflected off the surface. \n\nHere is an example of how this code can be used in a PlayCanvas project:\n\n```javascript\n// create a new material\nvar material = new pc.StandardMaterial();\n\n// set the shader code\nmaterial.chunks.viewNormal = /* glsl */`\n    #ifndef VIEWMATRIX\n    #define VIEWMATRIX\n    uniform mat4 matrix_view;\n    #endif\n\n    vec3 getViewNormal() {\n        return mat3(matrix_view) * vNormalW;\n    }\n`;\n\n// set the material on a mesh instance\nvar meshInstance = new pc.MeshInstance(node, mesh, material);\n``` \n\nIn this example, a new material is created and the `chunks.viewNormal` property is set to the shader code. This will ensure that the `getViewNormal()` function is included in the shader code when the material is used to render a mesh instance.",
  "questions": "1. **What is the purpose of the `#ifndef VIEWMATRIX` and `#define VIEWMATRIX` statements?**\\\nThese statements are used to ensure that the `matrix_view` uniform is only defined once in the code, preventing any potential errors that could arise from multiple definitions.\n\n2. **What is the data type of `matrix_view`?**\\\nBased on the `mat4` keyword used to define it, `matrix_view` is likely a 4x4 matrix data type.\n\n3. **What is the purpose of the `getViewNormal()` function?**\\\nThe `getViewNormal()` function returns the normal vector of the current view, which is calculated by multiplying the `vNormalW` vector by the `matrix_view` uniform after converting it to a 3x3 matrix."
}