{
  "fileName": "fogLinear.js",
  "filePath": "src/scene/shader-lib/chunks/lit/frag/fogLinear.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/lit/frag/fogLinear.js",
  "summary": "This code is a GLSL shader that adds fog to a 3D scene. It takes in three uniform variables: `fog_color`, `fog_start`, and `fog_end`. `fog_color` is the color of the fog, while `fog_start` and `fog_end` define the start and end distances of the fog from the camera. \n\nThe `addFog` function calculates the distance of the current fragment from the camera using `gl_FragCoord.z` and `gl_FragCoord.w`. It then calculates the `fogFactor` based on the distance of the fragment from the camera and the `fog_start` and `fog_end` values. The `clamp` function is used to ensure that `fogFactor` is always between 0 and 1. Finally, the `mix` function is used to blend the `fog_color` with the original color of the fragment based on the `fogFactor`.\n\nThis shader can be used in a larger project to add atmospheric effects to a 3D scene. For example, it can be used to simulate fog, mist, or haze. The `fog_start` and `fog_end` values can be adjusted to control the density and distance of the fog. The `fog_color` can be changed to create different colored fog effects. \n\nHere is an example of how this shader can be used in a PlayCanvas project:\n\n```javascript\n// Create a material with the fog shader\nvar material = new pc.StandardMaterial();\nmaterial.chunks.fog = `\n    uniform vec3 fog_color;\n    uniform float fog_start;\n    uniform float fog_end;\n    float dBlendModeFogFactor = 1.0;\n\n    vec3 addFog(vec3 color) {\n        float depth = gl_FragCoord.z / gl_FragCoord.w;\n        float fogFactor = (fog_end - depth) / (fog_end - fog_start);\n        fogFactor = clamp(fogFactor, 0.0, 1.0);\n        return mix(fog_color * dBlendModeFogFactor, color, fogFactor);\n    }\n`;\n\n// Set the fog color and distance\nmaterial.setParameter('fog_color', new pc.Color(0.5, 0.5, 0.5));\nmaterial.setParameter('fog_start', 10);\nmaterial.setParameter('fog_end', 50);\n\n// Apply the material to a mesh instance\nvar meshInstance = new pc.MeshInstance(node, mesh, material);\n``` \n\nIn this example, a new `StandardMaterial` is created with the `fog` shader code added to the `chunks` property. The `setParameter` function is used to set the `fog_color`, `fog_start`, and `fog_end` values. Finally, the material is applied to a `MeshInstance` which is attached to a node in the scene.",
  "questions": "1. What is the purpose of this code?\n   - This code defines a function called `addFog` that takes in a color and applies fog to it based on the distance from the camera.\n\n2. What are the inputs to the `addFog` function?\n   - The `addFog` function takes in a `vec3` color as its input.\n\n3. What are the outputs of the `addFog` function?\n   - The `addFog` function returns a `vec3` color with fog applied to it based on the distance from the camera."
}