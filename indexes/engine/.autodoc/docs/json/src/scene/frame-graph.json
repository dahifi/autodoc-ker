{
  "fileName": "frame-graph.js",
  "filePath": "src/scene/frame-graph.js",
  "url": "https://github.com/playcanvas/engine/src/scene/frame-graph.js",
  "summary": "The `FrameGraph` class represents a single rendering frame as a sequence of render passes. It is used to manage the rendering pipeline of the PlayCanvas engine. \n\nThe `renderPasses` property is an array that holds all the render passes that make up the frame. The `addRenderPass` method is used to add a render pass to the frame. The `reset` method clears the `renderPasses` array.\n\nThe `compile` method is used to prepare the frame for rendering. It walks over the `renderPasses` array and creates a map of render targets to their previous occurrence. If a render pass uses a render target that has been used before, the method checks if the previous pass stores data and updates the `prevPass` accordingly. If a render pass requires a cubemap texture, the method checks if the previous pass used the same texture and disables mipmap generation if necessary. Finally, the method handles the last passes rendering to each render target.\n\nThe `render` method is used to render the frame. It calls the `compile` method and then renders each render pass in the `renderPasses` array.\n\nOverall, the `FrameGraph` class is an important part of the PlayCanvas engine's rendering pipeline. It manages the sequence of render passes that make up a frame and ensures that each pass is executed correctly. Developers can use this class to create custom rendering pipelines or modify the existing one to suit their needs. For example, they can add custom render passes to the frame or modify the existing ones to achieve specific effects.",
  "questions": "1. What is the purpose of the `FrameGraph` class?\n- The `FrameGraph` class represents a single rendering frame as a sequence of render passes.\n\n2. What is the `renderTargetMap` used for?\n- The `renderTargetMap` is used during frame graph compilation to map a render target to its previous occurrence.\n\n3. What happens during the `compile` method?\n- During the `compile` method, the code walks over render passes to find passes rendering to the same cubemap texture and skips the mipmap generation till the last rendering to the cubemap to avoid mipmaps being generated after each face. It also handles what's left in the map - last passes rendering to each render target."
}