{
  "fileName": "device-cache.js",
  "filePath": "src/platform/graphics/device-cache.js",
  "url": "https://github.com/playcanvas/engine/src/platform/graphics/device-cache.js",
  "summary": "# DeviceCache Class\n\nThe `DeviceCache` class is a cache that stores shared resources associated with a device. The resources are removed from the cache when the device is destroyed. This class is used internally in the PlayCanvas engine project.\n\n## Properties\n\n### _cache\n\nThis is a private property that stores the resource for each `GraphicsDevice`. It is a `Map` object that maps a `GraphicsDevice` to a resource.\n\n```javascript\n_cache = new Map();\n```\n\n## Methods\n\n### get(device, onCreate)\n\nThis method returns the resources for the supplied `GraphicsDevice`. If the resource does not exist in the cache, it is created using the `onCreate` function and added to the cache. The `onCreate` function is a callback function that is called when the resource needs to be created.\n\n```javascript\nget(device, onCreate) {\n    if (!this._cache.has(device)) {\n        this._cache.set(device, onCreate());\n\n        // when the device is destroyed, destroy and remove its entry\n        device.on('destroy', () => {\n            this.remove(device);\n        });\n\n        // when the context is lost, call optional loseContext on its entry\n        device.on('devicelost', () => {\n            this._cache.get(device)?.loseContext?.(device);\n        });\n    }\n\n    return this._cache.get(device);\n}\n```\n\n### remove(device)\n\nThis method destroys and removes the content of the cache associated with the `GraphicsDevice`.\n\n```javascript\nremove(device) {\n    this._cache.get(device)?.destroy?.(device);\n    this._cache.delete(device);\n}\n```\n\n## Usage\n\nThe `DeviceCache` class is used to store shared resources associated with a `GraphicsDevice`. It is used internally in the PlayCanvas engine project to manage resources such as textures, shaders, and buffers. When a resource is needed, the `get` method is called with the `GraphicsDevice` as the argument. If the resource does not exist in the cache, it is created using the `onCreate` function and added to the cache. When the `GraphicsDevice` is destroyed, the resource is automatically removed from the cache. \n\n```javascript\nconst deviceCache = new DeviceCache();\n\nconst device = new GraphicsDevice();\n\nconst texture = deviceCache.get(device, () => {\n    // create texture\n    return new Texture(device, {\n        width: 256,\n        height: 256,\n        format: PIXELFORMAT_R8_G8_B8_A8\n    });\n});\n\n// use texture\n\ndevice.destroy();\n\n// texture is automatically removed from cache\n```",
  "questions": "1. What is the purpose of this code and how is it used in the PlayCanvas engine?\n- This code defines a class called `DeviceCache` that stores shared resources associated with a graphics device. It is used to cache resources and remove them when the device is destroyed.\n\n2. What is the `_cache` property and how is it used?\n- The `_cache` property is a `Map` that stores the resource for each `GraphicsDevice`. It is used to retrieve and store resources associated with a device.\n\n3. What happens when a device is destroyed or its context is lost?\n- When a device is destroyed, its entry in the cache is removed. When its context is lost, the optional `loseContext` function is called on its entry."
}