{
  "fileName": "keyboard-event.js",
  "filePath": "src/platform/input/keyboard-event.js",
  "url": "https://github.com/playcanvas/engine/src/platform/input/keyboard-event.js",
  "summary": "The code defines a class called `KeyboardEvent` which represents a key press or release event on a keyboard. This class is used in the PlayCanvas engine to handle keyboard input events. \n\nThe `KeyboardEvent` class has a constructor that takes two parameters: a `keyboard` object and an `event` object. The `keyboard` object is the instance of the `Keyboard` class that is firing the event. The `event` object is the original browser event that was fired. \n\nThe `KeyboardEvent` class has three properties: `key`, `element`, and `event`. The `key` property represents the keyCode of the key that has changed. The `element` property represents the element that fired the keyboard event. The `event` property represents the original browser event which was fired. \n\nThe `KeyboardEvent` class is used in the PlayCanvas engine to handle keyboard input events. For example, the following code shows how to use the `KeyboardEvent` class to handle a key down event for the space key:\n\n```\nvar onKeyDown = function (e) {\n    if (e.key === pc.KEY_SPACE) {\n        // space key pressed\n    }\n    e.event.preventDefault(); // Use original browser event to prevent browser action.\n};\napp.keyboard.on(\"keydown\", onKeyDown, this);\n```\n\nIn this code, the `onKeyDown` function is called when a key down event is fired on the keyboard. The `e` parameter is an instance of the `KeyboardEvent` class. The `if` statement checks if the `key` property of the `KeyboardEvent` instance is equal to the `pc.KEY_SPACE` constant, which represents the space key. If the space key is pressed, the code inside the `if` statement is executed. The `e.event.preventDefault()` line prevents the default browser action for the key down event.",
  "questions": "1. What is the purpose of the KeyboardEvent class?\n    \n    The KeyboardEvent class is used to represent a key press or release event and is passed into all event callbacks from the Keyboard.\n\n2. What parameters are required to create a new KeyboardEvent instance?\n    \n    A new KeyboardEvent instance requires a keyboard object and the original browser event that was fired.\n\n3. What properties are available on a KeyboardEvent instance?\n    \n    A KeyboardEvent instance has three properties: key (the keyCode of the key that has changed), element (the element that fired the keyboard event), and event (the original browser event which was fired)."
}