{
  "fileName": "model.js",
  "filePath": "src/framework/handlers/model.js",
  "url": "https://github.com/playcanvas/engine/src/framework/handlers/model.js",
  "summary": "The `ModelHandler` class is a resource handler used for loading 3D models in the PlayCanvas engine. It implements the `ResourceHandler` interface and is responsible for loading and parsing model data from various sources. \n\nThe `ModelHandler` constructor takes an instance of `AppBase` as an argument and initializes the `_device` property with the graphics device of the app. It also initializes the `_parsers` array with two parsers: `JsonModelParser` and `GlbModelParser`. These parsers are used to parse JSON and GLB model data respectively. The `addParser` method can be used to add additional parsers to the `_parsers` array.\n\nThe `load` method is used to load model data from a given URL. It takes a URL and a callback function as arguments. If the URL is a string, it is converted to an object with `load` and `original` properties. The `http.get` method is then used to fetch the model data from the URL. The `options` object passed to `http.get` specifies the response type based on the file extension of the URL. If the URL starts with `blob:` or `data:`, the response type is set to either `ARRAY_BUFFER` or `JSON` depending on the file extension. Once the model data is fetched, the `_parsers` array is iterated over to find the appropriate parser for the data. The `decider` function of each parser is called with the URL and response data as arguments. If a parser's `decider` function returns `true`, the parser's `parse` method is called with the response data and a callback function as arguments. The callback function is called with the parsed model data or an error if parsing fails.\n\nThe `open` method is used to process the parsed model data. It takes a URL and the parsed data as arguments and returns the data as-is.\n\nThe `patch` method is used to patch the loaded model data with additional data. It takes an `asset` object and an `assets` object as arguments. The `asset` object contains the loaded model data and the `assets` object contains all the assets loaded by the app. The `patch` method is used to map materials to mesh instances in the loaded model data. If a material is not found in the `assets` object, it is loaded and added to the `assets` object. If a material is removed from the `assets` object, the corresponding mesh instance is set to use the default material.\n\nThe `addParser` method is used to add a parser to the `_parsers` array. It takes a parser object and a `decider` function as arguments. The `decider` function is used to decide if the parser should be used to parse the model data. It takes a URL and data as arguments and returns `true` if the parser should be used.\n\nOverall, the `ModelHandler` class is an important part of the PlayCanvas engine as it provides a way to load and parse 3D model data from various sources. It can be extended with additional parsers to support new model formats.",
  "questions": "1. What is the purpose of this code file?\n- This code file is a resource handler used for loading Model resources in the PlayCanvas engine.\n\n2. What types of parsers are added to this ModelHandler instance?\n- Two types of parsers are added to this ModelHandler instance: JsonModelParser and GlbModelParser.\n\n3. What is the purpose of the `patch` method in this ModelHandler class?\n- The `patch` method is used to modify the loaded asset by replacing its meshInstance material with a new one based on the data mapping provided in the asset."
}