{
  "fileName": "tangentBinormal.js",
  "filePath": "src/scene/shader-lib/chunks/lit/vert/tangentBinormal.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/lit/vert/tangentBinormal.js",
  "summary": "This code is a shader code written in GLSL (OpenGL Shading Language) and it defines two functions: `getTangent()` and `getBinormal()`. These functions are used to calculate the tangent and binormal vectors of a 3D model's surface at a given vertex. \n\nThe `getTangent()` function takes the `vertex_tangent` attribute as input and multiplies it by the `dNormalMatrix` matrix to transform it into world space. The resulting vector is then normalized and returned as the tangent vector. The tangent vector is a vector that lies in the plane of the surface at the vertex and is perpendicular to the surface normal. It is commonly used in normal mapping to calculate the direction of the surface detail.\n\nThe `getBinormal()` function takes the `vNormalW` and `vTangentW` attributes as input and calculates the cross product between them. The resulting vector is then multiplied by the `vertex_tangent.w` attribute and returned as the binormal vector. The binormal vector is a vector that lies in the plane of the surface at the vertex and is perpendicular to both the surface normal and the tangent vector. It is commonly used in normal mapping to calculate the direction of the surface detail.\n\nThese functions are likely used in the larger PlayCanvas engine project to generate normal maps for 3D models. Normal maps are textures that store surface detail information in the RGB channels of each texel. By using the tangent and binormal vectors calculated by these functions, the engine can calculate the direction of the surface detail and apply it to the model's surface during rendering. \n\nHere is an example of how these functions might be used in a shader:\n\n```\nuniform sampler2D normalMap;\n\nvarying vec3 vNormalW;\nvarying vec3 vTangentW;\nattribute vec4 vertex_tangent;\n\nvoid main() {\n    vec3 tangent = getTangent();\n    vec3 binormal = getBinormal();\n    vec3 normal = texture2D(normalMap, uv).rgb * 2.0 - 1.0;\n    normal = normalize(tangent * normal.r + binormal * normal.g + vNormalW * normal.b);\n    // use the calculated normal vector for lighting calculations\n}\n```\n\nIn this example, the `normalMap` texture is sampled to get the surface detail information. The tangent and binormal vectors are calculated using the `getTangent()` and `getBinormal()` functions, and the surface normal is reconstructed using these vectors and the sampled normal map. The resulting normal vector is then used for lighting calculations.",
  "questions": "1. **What is the purpose of this code?**\\\nThis code defines two functions, `getTangent()` and `getBinormal()`, which are likely used for calculating tangent and binormal vectors in a 3D graphics application.\n\n2. **What is the input to these functions?**\\\nThe functions use variables `dNormalMatrix`, `vertex_tangent`, `vNormalW`, and `vTangentW`, which are likely defined elsewhere in the code. The specific data types and values of these variables would need to be known to understand the input to these functions.\n\n3. **What is the output of these functions?**\\\n`getTangent()` returns a normalized 3D vector, while `getBinormal()` returns the cross product of two other vectors multiplied by a scalar value. The purpose of these output values would depend on how they are used in the larger application."
}