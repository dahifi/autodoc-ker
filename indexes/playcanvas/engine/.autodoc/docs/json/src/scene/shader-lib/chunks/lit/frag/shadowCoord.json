{
  "fileName": "shadowCoord.js",
  "filePath": "src/scene/shader-lib/chunks/lit/frag/shadowCoord.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/lit/frag/shadowCoord.js",
  "summary": "The code provided is a set of functions that calculate shadow coordinates for different types of light sources in a 3D scene. The functions are written in GLSL, which is a shading language used for graphics programming. \n\nThe first two functions, `_getShadowCoordOrtho` and `_getShadowCoordPersp`, are helper functions that calculate the shadow coordinates for an orthographic and a perspective light source, respectively. Both functions take in a `shadowMatrix` which is a matrix that transforms the world coordinates of a vertex into the light's view space. The `shadowParams` parameter is a vector or a 4-component vector that contains information about the light source, such as its position, direction, and intensity. The `wPos` parameter is the world position of the vertex that needs to be shadowed. \n\nThe `getShadowCoordOrtho` and `getShadowCoordPersp` functions are the main functions that are called to calculate the shadow coordinates for a vertex. They take in the same parameters as their corresponding helper functions, but instead of `wPos`, they take in the `vPositionW` variable, which is the world position of the current vertex being processed. These functions call their corresponding helper functions to calculate the shadow coordinates and store them in the `dShadowCoord` variable.\n\nThe last two functions, `getShadowCoordPerspNormalOffset` and `getShadowCoordOrthoNormalOffset`, are similar to the previous two functions, but they also take in the `lightDirNorm` and `normal` parameters. These parameters are used to calculate the offset of the shadow coordinates based on the surface normal and the direction of the light source. This is useful for creating more realistic shadows that take into account the shape of the object being shadowed.\n\nOverall, these functions are an essential part of the PlayCanvas engine's rendering pipeline. They allow for the calculation of accurate shadow coordinates for different types of light sources, which is crucial for creating realistic 3D scenes. Here is an example of how these functions might be used in a larger project:\n\n```glsl\nuniform mat4 shadowMatrix;\nuniform vec3 shadowParams;\nuniform vec4 shadowParamsPersp;\nuniform vec3 lightPos;\nuniform vec3 lightDir;\nuniform vec3 lightDirNorm;\nuniform vec3 normal;\n\nvoid main() {\n  // Calculate shadow coordinates for an orthographic light source\n  getShadowCoordOrtho(shadowMatrix, shadowParams);\n\n  // Calculate shadow coordinates for a perspective light source\n  getShadowCoordPersp(shadowMatrix, shadowParamsPersp, lightPos, lightDir);\n\n  // Calculate shadow coordinates with normal offset for a perspective light source\n  getShadowCoordPerspNormalOffset(shadowMatrix, shadowParamsPersp, lightPos, lightDir, lightDirNorm, normal);\n\n  // Calculate shadow coordinates with normal offset for an orthographic light source\n  getShadowCoordOrthoNormalOffset(shadowMatrix, shadowParams, lightPos, lightDir, lightDirNorm, normal);\n\n  // Use the shadow coordinates to sample the shadow map and calculate the final color of the pixel\n  // ...\n}\n```",
  "questions": "1. What is the purpose of this code and how is it used in the PlayCanvas engine?\n   - This code defines functions for calculating shadow coordinates in orthographic and perspective projections, with and without normal offset. It is used in the PlayCanvas engine for rendering shadows in 3D scenes.\n2. What is the role of the `shadowParams` parameter in the `getShadowCoord` functions?\n   - The `shadowParams` parameter contains information about the shadow map, such as its size, resolution, and filtering mode. It is used to adjust the shadow coordinates and apply a shadow bias to prevent self-shadowing artifacts.\n3. What is the significance of the `dShadowCoord` variable and how is it computed?\n   - The `dShadowCoord` variable stores the final shadow coordinates in the range [0,1], which are used to sample the shadow map and determine the amount of shadowing at a given pixel. It is computed by transforming the world position of the pixel into the shadow map space, and adjusting the z-coordinate to avoid depth bias issues."
}