{
  "fileName": "particle.js",
  "filePath": "src/scene/shader-lib/chunks/particle/frag/particle.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/particle/frag/particle.js",
  "summary": "The code above is a GLSL shader that is used to render particle effects in the PlayCanvas engine. The shader takes in two textures, `colorMap` and `colorParam`, and uses them to calculate the final color of each particle. \n\nThe `texCoordsAlphaLife` varying is used to pass in the texture coordinates, alpha value, and life value of each particle. These values are used to sample the `colorMap` and `colorParam` textures to get the color and ramp values for each particle. \n\nThe `graphSampleSize` and `graphNumSamples` uniforms are used to control the size and number of samples taken from the ramp texture. These samples are used to interpolate the ramp value for each particle based on its alpha value. \n\nThe `CAMERAPLANES` define is used to pass in the camera parameters to the shader. The `softening` and `colorMult` uniforms are used to control the softening and color multiplication of the final particle color. \n\nThe `saturate` function is a helper function that clamps a value between 0 and 1. The `unpackFloat` function is another helper function that is used to unpack a float value from a RGBA color value. \n\nThe `main` function is the entry point of the shader. It first samples the `colorMap` and `colorParam` textures using the `texCoordsAlphaLife` varying. It then applies gamma correction to the sampled color values using the `gammaCorrectInput` function (not shown in this code). \n\nThe `ramp` value is then multiplied by the `colorMult` uniform and added to the alpha value of the particle. The `rgb` value of the particle is then multiplied by the `ramp.rgb` value to get the final color value. The `a` value of the particle is multiplied by the `ramp.a` value to get the final alpha value. \n\nOverall, this shader is an important part of the PlayCanvas engine's particle system. It allows for the creation of complex particle effects by using textures to control the color and ramp values of each particle.",
  "questions": "1. What is the purpose of the `gammaCorrectInput` function?\n    - The `gammaCorrectInput` function is used to apply gamma correction to the input texture.\n\n2. What is the significance of the `softening` uniform variable?\n    - The `softening` uniform variable is used to control the amount of softening applied to the texture.\n\n3. What is the purpose of the `unpackFloat` function?\n    - The `unpackFloat` function is used to unpack a float value from a vec4 RGBA depth value."
}