{
  "fileName": "texture-atlas.js",
  "filePath": "src/scene/texture-atlas.js",
  "url": "https://github.com/playcanvas/engine/src/scene/texture-atlas.js",
  "summary": "## TextureAtlas Class\n\nThe `TextureAtlas` class is a subclass of `EventHandler` that contains a number of frames from a texture. Each frame defines a region in a texture. The TextureAtlas is referenced by `Sprite`s. \n\n### Constructor\n\nThe constructor creates a new instance of the `TextureAtlas` class. It initializes two private properties `_texture` and `_frames` to `null`.\n\n### Properties\n\n#### texture\n\nThe `texture` property is a setter and getter that sets and gets the texture used by the atlas. It is of type `import('../platform/graphics/texture.js').Texture`.\n\n#### frames\n\nThe `frames` property is a setter and getter that sets and gets the frames which define portions of the texture atlas. It is of type `object`.\n\n### Methods\n\n#### setFrame(key, data)\n\nThe `setFrame` method sets a new frame in the texture atlas. It takes two parameters: `key` and `data`. `key` is the key of the frame and `data` is an object that contains the properties of the frame. The properties of the `data` object are:\n\n- `rect`: The u, v, width, height properties of the frame in pixels. It is of type `import('../core/math/vec4.js').Vec4`.\n- `pivot`: The pivot of the frame - values are between 0-1. It is of type `import('../core/math/vec2.js').Vec2`.\n- `border`: The border of the frame for 9-slicing. Values are ordered as follows: left, bottom, right, top border in pixels. It is of type `import('../core/math/vec4.js').Vec4`.\n\nIf the frame with the given `key` already exists, its properties are updated with the new values. Otherwise, a new frame is created with the given `key` and `data` properties.\n\n#### removeFrame(key)\n\nThe `removeFrame` method removes a frame from the texture atlas. It takes one parameter: `key`, which is the key of the frame to be removed.\n\n#### destroy()\n\nThe `destroy` method frees up the underlying texture owned by the atlas.\n\n### Example\n\n```javascript\nvar atlas = new pc.TextureAtlas();\natlas.frames = {\n    '0': {\n        // rect has u, v, width and height in pixels\n        rect: new pc.Vec4(0, 0, 256, 256),\n        // pivot has x, y values between 0-1 which define the point\n        // within the frame around which rotation and scale is calculated\n        pivot: new pc.Vec2(0.5, 0.5),\n        // border has left, bottom, right and top in pixels defining regions for 9-slicing\n        border: new pc.Vec4(5, 5, 5, 5)\n    },\n    '1': {\n        rect: new pc.Vec4(256, 0, 256, 256),\n        pivot: new pc.Vec2(0.5, 0.5),\n        border: new pc.Vec4(5, 5, 5, 5)\n    }\n};\n\natlas.setFrame('1', {\n    rect: new pc.Vec4(0, 0, 128, 128),\n    pivot: new pc.Vec2(0.5, 0.5),\n    border: new pc.Vec4(5, 5, 5, 5)\n});\n\natlas.removeFrame('1');\n\natlas.destroy();\n```\n\nIn the above example, a new instance of the `TextureAtlas` class is created. The `frames` property is set to an object that contains two frames with keys `0` and `1`. The `setFrame` method is called to update the properties of the frame with key `1`. The `removeFrame` method is called to remove the frame with key `1`. Finally, the `destroy` method is called to free up the underlying texture owned by the atlas.",
  "questions": "1. What is the purpose of the TextureAtlas class?\n    \n    The TextureAtlas class contains a number of frames from a texture, where each frame defines a region in a texture, and is referenced by Sprites.\n\n2. What are the properties of a frame in the texture atlas?\n    \n    A frame in the texture atlas has properties such as rect (u, v, width, height in pixels), pivot (x, y values between 0-1 which define the point within the frame around which rotation and scale is calculated), and border (left, bottom, right and top in pixels defining regions for 9-slicing).\n\n3. How can a developer set or remove a frame in the texture atlas?\n    \n    A developer can set a new frame in the texture atlas using the `setFrame` method, which takes a key and data object containing properties of the frame. A developer can remove a frame from the texture atlas using the `removeFrame` method, which takes a key of the frame to be removed."
}