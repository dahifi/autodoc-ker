{
  "fileName": "spherical.js",
  "filePath": "src/scene/shader-lib/chunks/common/frag/spherical.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/common/frag/spherical.js",
  "summary": "This code is a set of helper functions for working with equirectangular textures in the PlayCanvas engine. Equirectangular textures are images that are mapped onto a sphere, and are commonly used for skyboxes and other environmental effects in 3D graphics.\n\nThe first function, `toSpherical`, takes a 3D direction vector and returns a 2D vector representing the spherical coordinates of that direction. The `atan` function is used to calculate the azimuth angle (the angle around the equator), while `asin` is used to calculate the altitude angle (the angle above or below the equator). The resulting vector is returned as a `vec2`.\n\nThe second function, `toSphericalUv`, is similar to `toSpherical`, but returns a 2D texture coordinate instead of a spherical coordinate. The `toSpherical` function is called to calculate the spherical coordinates of the direction vector, which are then mapped to a UV coordinate by dividing by the constants `PI * 2.0` and `PI`, and adding `0.5` to center the texture. Finally, the `y` coordinate is inverted to match the convention used by most graphics APIs.\n\nThese functions can be used to convert between 3D directions and equirectangular texture coordinates, which is useful for rendering skyboxes and other environmental effects. For example, if you have a camera that is looking in a certain direction, you can use `toSpherical` to convert that direction to spherical coordinates, and then use `toSphericalUv` to get the corresponding texture coordinate for the equirectangular skybox texture. This allows you to render the skybox as a background behind your 3D scene, giving the illusion of a vast outdoor environment.",
  "questions": "1. What is the purpose of this code?\n    - This code contains helper functions for equirectangular mapping.\n2. What is the meaning of the `/* glsl */` comment at the beginning of the code?\n    - This comment indicates that the code is written in GLSL (OpenGL Shading Language) syntax.\n3. What is the expected input and output of the `toSphericalUv` function?\n    - The `toSphericalUv` function takes a 3D direction vector as input and returns a 2D UV coordinate for equirectangular mapping."
}