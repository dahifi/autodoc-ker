{
  "fileName": "shadowVSM_common.js",
  "filePath": "src/scene/shader-lib/chunks/lit/frag/shadowVSM_common.js",
  "url": "https://github.com/playcanvas/engine/src/scene/shader-lib/chunks/lit/frag/shadowVSM_common.js",
  "summary": "The code above is a GLSL shader code that contains several functions for calculating the Variance Shadow Mapping (VSM) technique. VSM is a shadow mapping algorithm that aims to reduce shadow aliasing artifacts by storing the depth and variance of the scene in a texture. The code is a part of the PlayCanvas engine project and can be used to implement VSM in 3D graphics applications.\n\nThe first function, `linstep`, is a linear interpolation function that returns a value between 0 and 1 based on the input value `v` and the range between `a` and `b`. This function is used to rescale the variance value in the `reduceLightBleeding` function.\n\nThe `reduceLightBleeding` function takes two parameters, `pMax` and `amount`, and returns a rescaled value of `pMax`. The function removes the tail of the variance distribution between 0 and `amount` and linearly rescales the remaining values between `amount` and 1. This function is used to reduce light bleeding artifacts that occur when the shadow map resolution is low.\n\nThe `chebyshevUpperBound` function calculates the probabilistic upper bound of the variance distribution using the Chebyshev inequality. The function takes four parameters, `moments`, `mean`, `minVariance`, and `lightBleedingReduction`. The `moments` parameter is a vector that contains the first two moments of the variance distribution, `mean` is the mean depth value, `minVariance` is the minimum variance value, and `lightBleedingReduction` is the amount of light bleeding reduction applied to the variance value. The function first computes the variance of the distribution and then calculates the probabilistic upper bound using the Chebyshev inequality. The `reduceLightBleeding` function is called to reduce light bleeding artifacts before calculating the upper bound. The function returns a value between 0 and 1 that represents the upper bound of the variance distribution.\n\nThe `calculateEVSM` function calculates the VSM value for a given pixel. The function takes four parameters, `moments`, `Z`, `vsmBias`, and `exponent`. The `moments` parameter is a vector that contains the first three moments of the variance distribution, `Z` is the depth value of the pixel, `vsmBias` is the VSM bias value, and `exponent` is the exponent value used to warp the depth value. The function first warps the depth value using the `exponent` value and updates the first two moments of the variance distribution using the warped depth value. The function then calculates the minimum variance value and calls the `chebyshevUpperBound` function to calculate the probabilistic upper bound of the variance distribution. The function returns a value between 0 and 1 that represents the VSM value of the pixel.\n\nOverall, this code provides a set of functions that can be used to implement the VSM technique in 3D graphics applications. The `calculateEVSM` function can be called for each pixel in the scene to calculate the VSM value, which can then be used to generate soft shadows with reduced aliasing artifacts.",
  "questions": "1. What is the purpose of the `reduceLightBleeding` function?\n- The `reduceLightBleeding` function removes the [0, amount] tail and linearly rescales (amount, 1] to reduce light bleeding.\n\n2. What is the `chebyshevUpperBound` function computing?\n- The `chebyshevUpperBound` function computes the probabilistic upper bound using the one-tailed Chebyshev method.\n\n3. What is the `calculateEVSM` function doing?\n- The `calculateEVSM` function calculates the Exponential Variance Shadow Mapping (EVSM) using the given moments, depth, bias, and exponent."
}