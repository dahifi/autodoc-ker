{
  "fileName": "shader-utils.js",
  "filePath": "src/platform/graphics/shader-utils.js",
  "url": "https://github.com/playcanvas/engine/src/platform/graphics/shader-utils.js",
  "summary": "The code provided is a module that exports a class called `ShaderUtils`. This class provides utility functions for shader creation. The purpose of this class is to create a shader definition that can be used to create a shader program. \n\nThe `createDefinition` method is the main method of this class. It takes two arguments: a `device` object and an `options` object. The `device` object is an instance of the `GraphicsDevice` class, which is used to determine the version of the shader code to generate. The `options` object is used to pass optional arguments to the method. \n\nThe `createDefinition` method generates a shader definition object that contains the following properties: \n\n- `name`: A string that represents the name of the shader.\n- `attributes`: An object that maps attribute names to semantic values.\n- `vshader`: A string that represents the vertex shader code.\n- `fshader`: A string that represents the fragment shader code.\n- `useTransformFeedback`: A boolean that indicates whether to use transform feedback.\n\nThe `createDefinition` method generates the vertex and fragment shader code by concatenating several strings together. These strings are generated by calling other methods of the `ShaderUtils` class. \n\nThe `versionCode` method generates a string that represents the version of the shader code to generate. This method checks the `device` object to determine whether to generate WebGL 1.0 or WebGL 2.0 shader code. \n\nThe `precisionCode` method generates a string that represents the precision of the shader code to generate. This method checks the `device` object to determine the maximum precision supported by the device. \n\nThe `gl1Extensions` method generates a string that represents the extensions used by the shader code. This method checks the `device` object to determine which extensions are supported by the device. \n\nThe `dummyFragmentCode` method generates a string that represents a dummy fragment shader code. This method is used as a fallback in case the `options` object does not contain a `fragmentCode` property. \n\nThe `collectAttributes` method extracts the attributes specified in a vertex shader. This method returns an object that maps attribute names to semantic values. \n\nOverall, the `ShaderUtils` class is an important part of the PlayCanvas engine project. It provides a convenient way to generate shader definitions that can be used to create shader programs.",
  "questions": "1. What is the purpose of this code file?\n- This code file provides utility functions for shader creation.\n\n2. What are the different shader chunks included in this file?\n- This file includes shader chunks for gles2, gles3, and webgpu for both vertex and fragment shaders, as well as a shared fragment shader chunk.\n\n3. What is the purpose of the `_attrib2Semantic` object?\n- The `_attrib2Semantic` object maps attribute names to semantic values used in the PlayCanvas engine."
}