{
  "fileName": "indexed-list.js",
  "filePath": "src/core/indexed-list.js",
  "url": "https://github.com/playcanvas/engine/src/core/indexed-list.js",
  "summary": "The `IndexedList` class is a data structure that allows for the storage of items in an ordered list, with the ability to look up items by a unique key. The class contains a private `_list` property, which is an array that stores the items in the order they were added, and a private `_index` property, which is an object that maps keys to the index of the corresponding item in the `_list` array.\n\nThe `push` method is used to add a new item to the list with a unique key. If the key already exists in the index, an error is thrown. Otherwise, the item is added to the end of the `_list` array, and its index is stored in the `_index` object using the provided key.\n\nThe `has` method is used to test whether a key has been added to the index. It returns `true` if the key is in the index, and `false` otherwise.\n\nThe `get` method is used to retrieve an item from the list using its key. If the key is in the index, the method returns the corresponding item from the `_list` array. If the key is not in the index, the method returns `null`.\n\nThe `remove` method is used to remove an item from the list using its key. If the key is in the index, the corresponding item is removed from the `_list` array, and its index is removed from the `_index` object. The method returns `true` if an item was removed, and `false` otherwise.\n\nThe `list` method is used to return the entire list of items in the order they were added.\n\nThe `clear` method is used to remove all items from the list and reset the index.\n\nThis data structure can be useful in a variety of scenarios where items need to be stored in an ordered list and accessed by a unique key. For example, it could be used to store entities in a game engine, where each entity has a unique ID that can be used to look it up quickly. Here is an example of how the `IndexedList` class could be used:\n\n```\nconst entities = new IndexedList();\n\n// Add some entities\nentities.push('player', { name: 'Player', health: 100 });\nentities.push('enemy1', { name: 'Enemy 1', health: 50 });\nentities.push('enemy2', { name: 'Enemy 2', health: 75 });\n\n// Get an entity by key\nconst player = entities.get('player');\nconsole.log(player); // { name: 'Player', health: 100 }\n\n// Remove an entity by key\nentities.remove('enemy1');\n\n// Get the entire list of entities\nconst allEntities = entities.list();\nconsole.log(allEntities); // [{ name: 'Player', health: 100 }, { name: 'Enemy 2', health: 75 }]\n```",
  "questions": "1. What is the purpose of this `IndexedList` class?\n- The `IndexedList` class is a data structure that allows for item lookup by key and can also return a list.\n\n2. What are the private properties of the `IndexedList` class?\n- The private properties of the `IndexedList` class are `_list`, which is an array of objects, and `_index`, which is an object with string keys and number values.\n\n3. What happens when a key already exists in the index during a `push` operation?\n- If a key already exists in the index during a `push` operation, an error will be thrown with the message \"Key already in index\" followed by the key that already exists."
}